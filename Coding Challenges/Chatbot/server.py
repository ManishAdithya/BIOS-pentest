import socket
from cryptography.fernet import Fernet
import hashlib
import hmac
import os

def generate_key():
    return Fernet.generate_key()

def encrypt_message(key, message):
    cipher = Fernet(key)
    encrypted_message = cipher.encrypt(message.encode())
    return encrypted_message

def decrypt_message(key, encrypted_message):
    cipher = Fernet(key)
    decrypted_message = cipher.decrypt(encrypted_message).decode()
    return decrypted_message

def calculate_sha512(data):
    sha512 = hashlib.sha512()
    sha512.update(data)
    return sha512.digest()

def calculate_hmac(key, data):
    h = hmac.new(key, data, hashlib.sha512)
    return h.digest()

def start_server():
    host = '127.0.0.1'
    port = 12345

    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.bind((host, port))
    server_socket.listen(1)

    print(f"Server listening on {host}:{port}")

    client_socket, address = server_socket.accept()
    print(f"Connection from {address}")

    key = generate_key()
    hmac_key = os.urandom(32)  # 256-bit key for HMAC

    client_socket.sendall(key)
    client_socket.sendall(hmac_key)

    try:
        while True:
            data = client_socket.recv(4096)
            if not data:
                break

            received_sha512 = client_socket.recv(64)
            received_hmac = client_socket.recv(64)
            decrypted_message = decrypt_message(key, data)

            if received_sha512 != calculate_sha512(data):
                print("Integrity check failed. Message may have been tampered with.")
            elif received_hmac != calculate_hmac(hmac_key, data):
                print("HMAC verification failed. Message may not be authentic.")
            else:
                print(f"Received: {decrypted_message}")

            response = input("Enter your response: ")
            encrypted_response = encrypt_message(key, response)
            client_socket.sendall(encrypted_response)
            client_socket.sendall(calculate_sha512(response.encode()))
            client_socket.sendall(calculate_hmac(hmac_key, encrypted_response))

    except KeyboardInterrupt:
        print("Exited by user")

    client_socket.close()

if __name__ == "__main__":
    start_server()

